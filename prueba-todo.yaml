---
- name: Validaciones en RHEL 9 sin cambios
  hosts: localhost
  become: yes
  tasks:
    - name: Crear archivo de log si no existe
      ansible.builtin.file:
        path: /var/log/ansible_validations.log
        state: touch

    # 1. Verificación de que el sistema esté actualizado
    - name: Verificar si el sistema está actualizado
      ansible.builtin.shell: yum check-update
      register: update_check
      ignore_errors: yes
    - name: Mostrar mensaje sobre la actualización del sistema
      ansible.builtin.debug:
        msg: "Punto 1: El sistema está actualizado en {{ inventory_hostname }}."
      when: update_check.rc == 0
    - name: Mostrar mensaje si el sistema no está actualizado
      ansible.builtin.debug:
        msg: "Punto 1 Invalido: El sistema tiene actualizaciones pendientes en {{ inventory_hostname }}."
      when: update_check.rc != 0
    - name: Registrar log si el sistema no está actualizado
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "El sistema no está actualizado en {{ inventory_hostname }}."
      when: update_check.rc != 0

    # 2. Verificar si samba y samba-client están instalados
    - name: Verificar instalación de samba y samba-client
      ansible.builtin.command:
        cmd: "rpm -q samba samba-client"
      register: samba_check
      ignore_errors: yes
    - name: Mostrar mensaje sobre la instalación de samba y samba-client
      ansible.builtin.debug:
        msg: "Punto 2: Samba y samba-client están instalados en {{ inventory_hostname }}."
      when: samba_check.rc == 0
    - name: Mostrar mensaje si samba o samba-client no están instalados
      ansible.builtin.debug:
        msg: "Punto 2 Invalido: Samba o samba-client no están instalados en {{ inventory_hostname }}."
      when: samba_check.rc != 0
    - name: Registrar log si samba o samba-client no están instalados
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Samba o samba-client no están instalados en {{ inventory_hostname }}."
      when: samba_check.rc != 0

    # 3. Verificar si SELinux está activo
    - name: Verificar si SELinux está activo
      ansible.builtin.shell: getenforce
      register: selinux_status
    - name: Mostrar mensaje sobre SELinux
      ansible.builtin.debug:
        msg: "Punto 3: SELinux está activo en {{ inventory_hostname }}."
      when: selinux_status.stdout == "Enforcing"
    - name: Mostrar mensaje si SELinux no está activo
      ansible.builtin.debug:
        msg: "Punto 3 Invalido: SELinux no está activo en {{ inventory_hostname }}."
      when: selinux_status.stdout != "Enforcing"
    - name: Registrar log si SELinux no está activo
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "SELinux no está activo en {{ inventory_hostname }}."
      when: selinux_status.stdout != "Enforcing"

    # 4. Verificación de servicio bluetooth
    - name: Verificar si Bluetooth está instalado
      command: systemctl status bluetooth
      register: bluetooth_status
      ignore_errors: true

    - name: Registrar en el log si bluetooth no está instalado
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        create: yes
        line: "El servicio bluetooth no está instalado en {{ inventory_hostname }} - {{ ansible_date_time.date }}."
      when: bluetooth_status.failed

    - block:
        - name: Validar si bluetooth está detenido
          ansible.builtin.systemd:
            name: bluetooth
            state: stopped
            enabled: no
          register: bluetooth_check

        - name: Mostrar mensaje si bluetooth está detenido y deshabilitado
          debug:
            msg: "El servicio bluetooth está deshabilitado y detenido en {{ inventory_hostname }}."
          when:
            - bluetooth_check.status == 3
            - bluetooth_check.enabled == false

        - name: Mostrar mensaje si bluetooth está habilitado o en ejecución
          debug:
            msg: "El servicio bluetooth está habilitado o en ejecución en {{ inventory_hostname }}."
          when:
            - bluetooth_check.status != 3 or bluetooth_check.enabled != false

      when: not bluetooth_status.failed

    # 5. Verificación de usuarios
    - name: Verificar si los usuarios existen
      ansible.builtin.shell: id {{ item }}
      loop:
        - compras
        - comercial
        - ventas
        - administrativo
        - soporte
      register: users_check
      ignore_errors: yes
    - name: Mostrar mensaje si todos los usuarios existen
      ansible.builtin.debug:
        msg: "Punto 5: Todos los usuarios existen en {{ inventory_hostname }}."
      when: users_check.results | selectattr('rc', '==', 0) | list | length == 5
    - name: Mostrar mensaje si algún usuario no existe
      ansible.builtin.debug:
        msg: "Punto 5 Invalido: Algún usuario no existe en {{ inventory_hostname }}."
      when: users_check.results | selectattr('rc', '!=', 0) | list | length > 0
    - name: Registrar log si algún usuario no existe
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "El usuario {{ item }} no existe en {{ inventory_hostname }}."
      when: users_check.results | selectattr('rc', '!=', 0) | list | length > 0
   # Paso 6: Verificar si CUPS está deshabilitado
    - name: Verificar si CUPS está deshabilitado
      ansible.builtin.systemd:
        name: cups
        enabled: no
        state: stopped
        masked: yes
      check_mode: yes
      register: cups_status
    - name: Registrar log si CUPS está activo o habilitado
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "CUPS está activo o habilitado en {{ inventory_hostname }}."
      when: cups_status.changed
  
    # Paso 7: Verificar usuarios y contraseñas
    - name: Verificar usuarios y contraseñas
      ansible.builtin.user:
        name: "{{ item }}"
        password: "{{ 'DefaultHackatonLabs123*' | password_hash('sha512') }}"
        groups: hackatonLabs
        state: present
      check_mode: yes
      loop:
        - compras
        - comercial
        - ventas
        - administrativo
        - soporte
      register: users_check
    - name: Registrar log si falta algún usuario o no tiene la contraseña correcta
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "El usuario {{ item.item }} no está presente o no tiene la contraseña correcta en {{ inventory_hostname }}."
      when: users_check.results | selectattr('changed') | list | length > 0
  
    # Paso 8: Verificar carpeta ~/guias
    - name: Verificar que la carpeta ~/guias exista y pertenezca al grupo hackatonLabs
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/guias
        owner: "{{ ansible_user }}"
        group: hackatonLabs
        state: directory
        mode: '0775'
      check_mode: yes
      register: guias_folder_check
    - name: Registrar log si la carpeta ~/guias no existe o no pertenece al grupo hackatonLabs
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "La carpeta ~/guias no existe o no pertenece al grupo hackatonLabs en {{ inventory_hostname }}."
      when: guias_folder_check.changed
  
    # Paso 9: Verificar que existan 100 archivos vacíos
    - name: Verificar si existen 100 archivos en ~/guias
      ansible.builtin.shell: |
        for i in $(seq 1 100); do
          touch ~/guias/archivo-$i.txt
        done
      check_mode: yes
      register: archivos_check
    - name: Registrar log si no existen los archivos archivo-1.txt a archivo-100.txt
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "No existen 100 archivos archivo-1.txt a archivo-100.txt en {{ inventory_hostname }}."
      when: archivos_check.changed
  
    # Paso 10: Verificar carpeta /guias/config y archivos
    - name: Verificar que /guias/config tenga copias de archivos importantes
      ansible.builtin.command:
        cmd: stat /guias/config
      check_mode: yes
      register: guias_config_check
    - name: Registrar log si /guias/config no contiene las copias necesarias
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "/guias/config no tiene los archivos necesarios en {{ inventory_hostname }}."
      when: guias_config_check.failed
  
    - name: Verificar copias de archivos
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /guias/config/
        remote_src: yes
      check_mode: yes
      loop:
        - /etc/redhat-release
        - /etc/passwd
        - /usr/share/dict/linux.words
      register: copy_check
    - name: Registrar log si las copias de archivos no están presentes en /guias/config
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Las copias de archivos no están presentes en /guias/config en {{ inventory_hostname }}."
      when: copy_check.changed
  
    # Paso 11: Validar enlace simbólico en /guias/config
    - name: Verificar si el enlace simbólico /guias/config/grupos existe y apunta a /etc/group
      ansible.builtin.file:
        path: /guias/config/grupos
        src: /etc/group
        state: link
      check_mode: yes
      register: symlink_check
    - name: Registrar log si el enlace simbólico no existe o está mal creado
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "El enlace simbólico /guias/config/grupos no existe o está mal creado en {{ inventory_hostname }}."
      when: symlink_check.changed
  
    # Paso 12: Verificar la frase en /etc/motd
    - name: Verificar si la frase 'El problema no es problema' está en /etc/motd
      ansible.builtin.shell: grep -Fxq 'El problema no es problema' /etc/motd
      register: motd_check
      ignore_errors: yes
    - name: Registrar log si la frase no está en /etc/motd
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "La frase 'El problema no es problema' no está en /etc/motd en {{ inventory_hostname }}."
      when: motd_check.rc != 0
  
    # Paso 13: Verificar particiones en el sistema operativo
    - name: Verificar si el archivo /tmp/particiones.txt existe y contiene las particiones correctas
      ansible.builtin.command:
        cmd: "diff <(lsblk -no NAME,SIZE) /tmp/particiones.txt"
      check_mode: yes
      register: partitions_check
      ignore_errors: yes
    - name: Registrar log si las particiones no coinciden o el archivo no existe
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Las particiones no coinciden o /tmp/particiones.txt no existe en {{ inventory_hostname }}."
      when: partitions_check.rc != 0
  
    # Paso 14: Verificar que haya 25GB de espacio disponible
    - name: Verificar que haya 25GB de espacio disponible
      ansible.builtin.shell: |
        df -h / | awk '$4 ~ /[2-9][0-9]G|100G/{ print $4 }'
      register: space_check
      ignore_errors: yes
    - name: Registrar log si no hay 25GB de espacio disponible
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "No hay 25GB de espacio disponible en {{ inventory_hostname }}."
      when: space_check.stdout == ""  
