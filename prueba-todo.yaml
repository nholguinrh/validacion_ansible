---
- name: Validaciones en RHEL 9 sin cambios
  hosts: localhost
  become: yes
  tasks:
    - name: Crear archivo de log si no existe
      ansible.builtin.file:
        path: /var/log/ansible_validations.log
        state: touch

    # 1. Verificación de que el sistema esté actualizado
    - name: Verificar si el sistema está actualizado
      ansible.builtin.shell: yum check-update
      register: update_check
      ignore_errors: yes
    - name: Mostrar mensaje sobre la actualización del sistema
      ansible.builtin.debug:
        msg: "Punto 1: VALIDO El sistema está actualizado."
      when: update_check.rc == 0
    - name: Mostrar mensaje sobre la actualización del sistema
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 1: Valido El sistema está actualizado."
      when: update_check.rc == 0  
    - name: Mostrar mensaje si el sistema no está actualizado
      ansible.builtin.debug:
        msg: "Punto 1: INVALIDO El sistema tiene actualizaciones pendientes."
      when: update_check.rc != 0
    - name: Registrar log si el sistema no está actualizado
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 1: INVALIDO El sistema no está actualizado."
      when: update_check.rc != 0

    # 2. Verificar si samba y samba-client están instalados
    - name: Verificar instalación de samba y samba-client
      ansible.builtin.command:
        cmd: "rpm -q samba samba-client"
      register: samba_check
      ignore_errors: yes
    - name: Mostrar mensaje sobre la instalación de samba y samba-client
      ansible.builtin.debug:
        msg: "Punto 2: VALIDO Samba y samba-client están instalados"
      when: samba_check.rc == 0
    - name: Mostrar mensaje sobre la instalación de samba y samba-client
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 2 Valido: Samba y samba-client están instalados"
      when: samba_check.rc == 0
    - name: Mostrar mensaje si samba o samba-client no están instalados
      ansible.builtin.debug:
        msg: "Punto 2 Invalido: Samba o samba-client no están instalados"
      when: samba_check.rc != 0
    - name: Registrar log si samba o samba-client no están instalados
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 2 Invalido: Samba o samba-client no están instalados"
      when: samba_check.rc != 0

    # 3. Verificar si SELinux está activo
    - name: Verificar si SELinux está activo
      ansible.builtin.shell: getenforce
      register: selinux_status
    - name: Mostrar mensaje sobre SELinux
      ansible.builtin.debug:
        msg: "Punto 3: VALIDO SELinux está activo"
      when: selinux_status.stdout == "Enforcing"
    - name: Mostrar mensaje si SELinux no está activo
      ansible.builtin.debug:
        msg: "Punto 3 Invalido: SELinux no está activo."
      when: selinux_status.stdout != "Enforcing"
    - name: Registrar log si SELinux no está activo
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 3 Invalido: SELinux no está activo en"
      when: selinux_status.stdout != "Enforcing"
    - name: Registrar log si SELinux no está activo
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 3 Valido: SELinux está activo en"
      when: selinux_status.stdout == "Enforcing"  

    # 4. Verificación de usuarios
    - name: Verificar si los usuarios existen
      ansible.builtin.shell: id {{ item }}
      loop:
        - compras
        - comercial
        - ventas
        - administrativo
        - soporte
      register: users_check
      ignore_errors: yes
    - name: Mostrar mensaje si todos los usuarios existen
      ansible.builtin.debug:
        msg: "Punto 4 VALIDO: Todos los usuarios existen."
      when: users_check.results | selectattr('rc', '==', 0) | list | length == 5
    - name: Registrar log si los usuarios existen
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 4 VALIDO: Todos los usuarios existen en {{ inventory_hostname }}."
      when: users_check.results | selectattr('rc', '==', 0) | list | length == 5
    - name: Mostrar mensaje si algún usuario no existe
      ansible.builtin.debug:
        msg: "Punto 4 Invalido: Algún usuario no existe en {{ inventory_hostname }}."
      when: users_check.results | selectattr('rc', '!=', 0) | list | length > 0
    - name: Registrar log si algún usuario no existe
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 4 Invalido: Algún usuario no existe en {{ inventory_hostname }}."
      when: users_check.results | selectattr('rc', '!=', 0) | list | length > 0

    # 5. Verificar la existencia de la carpeta /guias y su pertenencia al grupo hackatonLabs
    - name: Verificar si la carpeta /guias existe
      ansible.builtin.stat:
        path: /guias
      register: guias_check
      ignore_errors: yes

    - name: Mostrar mensaje si la carpeta /guias no existe
      ansible.builtin.debug:
        msg: "Punto 5 Invalido: La carpeta /guias no existe."
      when: guias_check.stat.exists == false
      ignore_errors: yes

    - name: Registrar log si la carpeta /guias no existe
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 5 Invalido: La carpeta /guias no existe."
      when: guias_check.stat.exists == false
      ignore_errors: yes

    - name: Verificar pertenencia de la carpeta /guias al grupo hackatonLabs
      ansible.builtin.debug:
        msg: "Punto 5: VALIDO La carpeta /guias pertenece al grupo hackatonLabs."
      when: guias_check.stat.gr_name == 'hackatonLabs'
      ignore_errors: yes
    - name: Verificar pertenencia de la carpeta /guias al grupo hackatonLabs
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 5: VALIDO La carpeta /guias pertenece al grupo hackatonLabs."
      when: guias_check.stat.gr_name == 'hackatonLabs'
      ignore_errors: yes
      
    - name: Verificar pertenencia de la carpeta /guias al grupo hackatonLabs
      ansible.builtin.debug:
        msg: "Punto 5: Invalido La carpeta /guias no pertenece al grupo hackatonLabs."
      when: guias_check.stat.gr_name != 'hackatonLabs'
      ignore_errors: yes
    - name: Verificar pertenencia de la carpeta /guias al grupo hackatonLabs
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 5: Invalido La carpeta /guias no pertenece al grupo hackatonLabs."
      when: guias_check.stat.gr_name != 'hackatonLabs'
      ignore_errors: yes  


    # 6. Verificar que existan 100 archivos vacíos
    - name: Verificar si existen los archivos archivo-1.txt a archivo-100.txt en /guias
      vars:
        files_missing: []
      block:
        - name: Comprobar existencia de archivos archivo-1.txt a archivo-100.txt
          ansible.builtin.stat:
            path: "/guias/archivo-{{ item }}.txt"
          loop: "{{ range(1, 101) | list }}"
          register: archivos_check

        - name: Agregar archivos faltantes a la lista
          set_fact:
            files_missing: "{{ files_missing + [item] }}"
          when: not archivos_check.results[item - 1].stat.exists
          loop: "{{ range(1, 101) | list }}"

        - name: Mostrar mensaje en consola sobre archivos faltantes
          ansible.builtin.debug:
            msg: >
              {% if files_missing | length > 0 %}
              Punto 6 Invalido: Faltan los archivos {{ files_missing }}.
              {% else %}
              Punto 6 Valido: Todos los archivos están presentes.
              {% endif %}
          
        - name: Registrar log sobre archivos faltantes
          ansible.builtin.lineinfile:
            path: /var/log/ansible_validations.log
            line: >
              {% if files_missing | length > 0 %}
              Punto 6 Invalido: Faltan los archivos {{ files_missing }}.
              {% else %}
              Punto 6 Valido: Todos los archivos están presentes.
              {% endif %}


    # 7. Verificar carpeta /guias/config y archivos
    - name: Verificar que /guias/config tenga copias de archivos
      ansible.builtin.command:
        cmd: stat /guias/config
      check_mode: yes
      register: guias_config_check
    - name: Registrar log si /guias/config no contiene las copias necesarias
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 7: Invalido /guias/config no tiene los archivos necesarios."
      when: guias_config_check.failed

    - name: Verificar copias de archivos
      ansible.builtin.command:
        cmd: stat /guias/config/redhat-release
      register: file_check 
    - name: redhat-release están presentes en /guias/config
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 7 Valido: Las copias de archivos redhat-releaseo están presentes en /guias/config."
      when: file_check.exist  

     - name: Verificar copias de archivos
       ansible.builtin.command:
         cmd: stat /guias/config/passwd
       register: file_check 
     - name: redhat-release están presentes en /guias/config
       ansible.builtin.lineinfile:
         path: /var/log/ansible_validations.log
         line: "Punto 7 Valido: Las copias de archivos passwd están presentes en /guias/config."
       when: file_check.exist  

      - name: Verificar copias de archivos
       ansible.builtin.command:
         cmd: stat /guias/config/linux.words
       register: file_check 
     - name: redhat-release están presentes en /guias/config
       ansible.builtin.lineinfile:
         path: /var/log/ansible_validations.log
         line: "Punto 7 Valido: Las copias de archivos linux.words están presentes en /guias/config."
       when: file_check.exist        

      - name: Verificar copias de archivos
      ansible.builtin.command:
        cmd: stat /guias/config/redhat-release
      register: file_check 
    - name: redhat-release están presentes en /guias/config
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 7 Valido: Las copias de archivos redhat-releaseo están presentes en /guias/config."
      when: file_check.exist  

    - name: Registrar log si las copias de archivos no están presentes en /guias/config
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 7 Invalido: Las copias de archivos no están presentes en /guias/config."
      when: copy_check.changed

    # 8. Validar enlace simbólico en /guias/config
    - name: Verificar si el enlace simbólico /guias/config/grupos existe y apunta a /etc/group
      ansible.builtin.file:
        path: /guias/config/grupos
        src: /etc/group
        state: link
      check_mode: yes
      register: symlink_check
    - name: Registrar log si el enlace simbólico no existe o está mal creado
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 8 Invalido: El enlace simbólico /guias/config/grupos no existe o está mal creado."
      when: symlink_check.changed

    # 9. Verificar la frase en /etc/motd
    - name: Verificar si la frase 'El problema no es problema' está en /etc/motd
      ansible.builtin.shell: grep -Fxq 'El problema no es problema' /etc/motd
      register: motd_check
      ignore_errors: yes
    - name: Registrar log si la frase no está en /etc/motd
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 9 Invalido: La frase 'El problema no es problema' no está en /etc/motd."
      when: motd_check.rc != 0
    - name: Registrar log si la frase no está en /etc/motd
      ansible.builtin.lineinfile:
        path: /var/log/ansible_validations.log
        line: "Punto 9 Valido: La frase 'El problema no es problema' si está en /etc/motd."
      when: motd_check.rc == 0
  
